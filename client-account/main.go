// https://goethereumbook.org/en/client-setup/

package main

import (
	"context"
	"fmt"
	"log"
	"math"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/ethclient"
)

func main() {
	// 1. Initialize client by connecting to Ethereum network
	// client, err := ethclient.Dial("http://127.0.0.1:8545")
	client, err := ethclient.Dial("https://cloudflare-eth.com")
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("we have a connection")
	_ = client // we'll use this in the upcoming sections

	// 2. Deserialize string address - it can be for an account or a smart contract
	// An address generated by start-ganache.sh
	// account := common.HexToAddress("0xE280029a7867BA5C9154434886c241775ea87e53")

	// Example wallet address. Probably Etherscan?
	account := common.HexToAddress("0x71c7656ec7ab88b098defb751b7401b5f6d8976f")

	// 3. Check account balance
	balance, err := client.BalanceAt(context.Background(), account, nil)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("Balance in wei: %v\n", balance)

	blockNumber := big.NewInt(5532993)
	bnBalance, err := client.BalanceAt(context.Background(), account, blockNumber)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("Balance in wei for block number = %v: %v\n", blockNumber, bnBalance)

	// Convert balance (denoted in wei) to ether (10^18 multiplier)
	fbalance := new(big.Float).SetInt(bnBalance)
	ethValue := new(big.Float).Quo(fbalance, big.NewFloat(math.Pow10(18)))

	fmt.Printf("Balance in ether for block number = %v: %v\n", blockNumber, ethValue)

	// Pending balance: know what the pending account balance is, for example after submitting or waiting for a transaction to be confirmed
	pendingBalance, err := client.PendingBalanceAt(context.Background(), account)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("Pending balance in wei: %v\n", pendingBalance)
}
